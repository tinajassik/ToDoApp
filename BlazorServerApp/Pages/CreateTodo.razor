@page "/CreateTodo"
@using HttpClients.ClientInterfaces
@using UIComponents
@using Domain.Models
@using Domain.DTOs
@inject IUserService userService
@inject ITodoService todoService
@inject NavigationManager navMgr


@* ask Troels here --- 
how to make the razor file to recognize "users" if I use the "behind code" *@
@* + then method Create() 2x in the namespcae, compiler complaining, wat to do? *@

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h3>Create Todo</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="todoTitle"/>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="selectedUserId">
                <option>Choose</option>
                @foreach (User user in users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                @* <label style="color: red">@msg</label> *@
                
                <MudAlert Severity="Severity.Warning">@msg</MudAlert>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

<Modal ShowModal="showModal">
    <p>New todo Item successfully created!</p>
    <button class="acceptbtn" @onclick="@Proceed">Wonderful</button>
</Modal>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string todoTitle = "";

    private string msg = "";
    private bool showModal; 

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewTodos");
    }
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(todoTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            TodoCreationDto dto = new((int)selectedUserId, todoTitle);
            await todoService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}